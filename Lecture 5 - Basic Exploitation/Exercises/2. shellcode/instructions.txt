Exercise B: Shellcodes

In this exercise you will write and execute your own shellcode.

This exercise has five parts:

1. Write a simple shellcode you can see the result of
	(e.g. execute /bin/sh or create a new directory in the current directory)
	Make 'exbsc' run this shellcode, and make sure it works as expected.
	
2. Make 'excsc' run your shellcode
	This program has a very simple mitigation agains stack overflows.
	
3. Make 'exdsc' run your shellcode
	Your solution to (2) may already work here, or not.
	
4. Write a reverse-shell shellcode to connect to your host
	(Either your laptop or this course's supplied VM)
	Make 'exbsc' run this shellcode
	
5. Make 'excsc' and 'exdsc' run this shellcode
	If you solved the previous parts in an organized manner, this part should be trivial.
	
General notes:

To listen to a reverse-shell connection either run 'nc -lvp _portnumber_' on a linux machine, or use 'listener.py' from the tools directory on your machine
Remember you have the script 'sc.sh' and an example file 'sc.as' in the tools directory.
You can test a shellcode using 'shellcode_tester' located in the tools directory.
Its source ('shellcode_tester.c') is also provided if you wish to make modifications.

Each part is passed when the shellcode performs its purpose.
The part is not passed if you get a segfault or an illegal instruction.

Adapted for ARM from exploit-exercises.com (R.I.P)
